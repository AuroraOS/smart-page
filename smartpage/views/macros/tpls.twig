{% macro link(arr) %}
	{% for item in arr.std.css %}
	<link rel="stylesheet" href="{{item}}">
	{% endfor %}
	
	{% for item in arr.async.css %}
	<link rel="preload" href="{{item}}" as="style" onload="this.onload=null;this.rel='stylesheet'">
	<noscript><link rel="stylesheet" href="{{item}}"></noscript>
	{% endfor %}
	
	<script src="{{asset('dappur/js/css.preload.js')}}"></script>
{% endmacro %}

{% macro script(arr) %}
	{% import _self as sp %}
	
	{% for item in arr.std.js %}
	  <script src="{{item}}"></script>
	{% endfor %}
	
	{{ sp.scriptAsy(arr.async.js) }}
	
	
{% endmacro %}

{% macro scriptAsy(arr) %}
<script type="text/javascript">


(function() {
			var prot = '';//("https:"===document.location.protocol?"https://":"http://");

			var scripts = [{% for item in arr %}"{{item}}",
			{% endfor %}];

			function completed() { console.log('completed'); }  // FIXME: remove logs

			function checkStateAndCall(path, callback) {
					var _success = false;
					return function() {
							if (!_success && (!this.readyState || (this.readyState == 'complete'))) {
									_success = true;
									console.log(path, 'is ready');
									callback();
							}
					};
			}

			function asyncLoadScripts(files) {
					function loadNext() { // chain element
							if (!files.length) completed();
							var path = files.shift();
							var scriptElm = document.createElement('script');
							scriptElm.type = 'text/javascript';
							scriptElm.async = true;
							scriptElm.src = prot+path;
							scriptElm.onload = scriptElm.onreadystatechange =
									checkStateAndCall(path, loadNext); // load next file in chain when
																										 // this one will be ready
							var headElm = document.head || document.getElementsByTagName('head')[0];
							headElm.appendChild(scriptElm);
					}
					loadNext(); // start a chain
			}

			asyncLoadScripts(scripts);
		})();
</script>
{% endmacro %}